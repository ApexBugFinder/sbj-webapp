# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest
stages:
    - setup-stage
    - test
    - build-stage
    - deploy-feature-stage
    - deploy-stage
    - deploy-server-stage
# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  FF_USE_FASTZIP: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_IMAGE_TAG: obasi79/sbj-webapp:$CI_COMMIT_SHORT_SHA
  # DOCKER_IMAGE_TAG: obasi79/sbj-webapp:$CI_COMMIT_REF_SLUG

  GITLAB_IMAGE_TAG: $CI_REGISTRY_IMAGE/sbj-webapp/app-image:$CI_COMMIT_REF_SLUG


  FEATURE_APP: "$CI_ENVIRONMENT_SLUG"
  PRIVATE_SERVER: "https://198.211.29.93"
  STAGING_APP: sbjwebapp-staging
  PRODUCTION_APP: sbjwebapp-production

  APEXBUGSERVER_STAGING: obasi79/$STAGING_APP:$CI_COMMIT_REF_SLUG
  APEXBUGSERVER_PRODUCTION: obasi79/$PRODUCTION_APP



# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  untracked: true
  policy: push
  key: ${CI_COMMIT_SHORT_SHA}
  paths:
    - .cache/pip
    - venv/
    - pytest_reports/





# before_script:
#   - python --version  # For debugging
#   - pip install virtualenv
#   - virtualenv venv
#   - source venv/bin/activate
#   - pip install -r requirements.txt




# setup:
#   stage: setup-stage
#   image: python:latest
#   tags:
#     - sbjwebapp
#   before_script:
#     - source venv/bin/activate
#   script:
#     - pip3 install -r requirements.txt



# test:
#   stage: test
#   image: python:latest
#   before_script:

#     - source venv/bin/activate
#     - pip3 install -r requirements.txt

#   script:
#     - pytest --html=pytest_reports/pytest-report.html --self-contained-html
#   artifacts:
#     when: always
#     paths:
#       - pytest_reports/


# build:
#   stage: build-stage
#   image: docker:latest
#   tags:
#     - sbjwebapp
#   services:
#       - docker:dind
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - echo $DOCKER_IMAGE_TAG
#     - echo $GITLAB_IMAGE_TAG
#     - docker images
#     # - docker build -t $GITLAB_IMAGE_TAG .
#     - docker build -t $DOCKER_IMAGE_TAG .
#     - docker images
#     - docker push $GITLAB_IMAGE_TAG
#     - docker images


# deploy-production:
#   stage: deploy-server-stage
#   image: docker:dind
#   services:
#     - docker:dind
#   tags:
#     - sbjwebapp
#   environment:
#     name: production
#     url: https://198.211.29.93
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker pull $GITLAB_IMAGE_TAG
#     - docker images
#     - echo $APEXBUGSERVER_PRODUCTION
#     - docker tag $GITLAB_IMAGE_TAG $APEXBUGSERVER_PRODUCTION
#     - echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
#     - docker push $APEXBUGSERVER_PRODUCTION
#     - docker run --rm -d -it -p 3700:8080 $APEXBUGSERVER_PRODUCTION
#     - docker ps
#     - echo "App deployed to staging server at " $PRIVATE_SERVER
#     - ls -al

# deploy-run:
#   stage: deploy-server-stage
#   image: python:latest
#   tags:
#     - sbjwebapp
#   environment:
#     name: production
#     url: https://198.211.29.93
#   script:
#     - ls -al
#     - cd flask/sbj
#     - ls -al
#     - python3 wsgi.py

# pages:
#   script:
#     - pip install sphinx sphinx-rtd-theme
#     - cd doc
#     - make html
#     - mv build/html/ ../public/
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
