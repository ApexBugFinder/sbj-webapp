# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest
stages:
    - setup-stage
    - test
    - build-stage
    - deploy-feature-stage
    - deploy-stage
    - deploy-server-stage
# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  FF_USE_FASTZIP: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  IMAGE_TAG: obasi79/sbj-webapp
  DOCKER_IMAGE_TAG: obasi79/sbj-webapp:$CI_COMMIT_SHORT_SHA
  # DOCKER_IMAGE_TAG: obasi79/sbj-webapp:$CI_COMMIT_REF_SLUG

  GITLAB_IMAGE_TAG: $CI_REGISTRY_IMAGE/sbj-webapp/app-image:$CI_COMMIT_REF_SLUG


  FEATURE_APP: $IMAGE_TAG/$CI_ENVIRONMENT_SLUG
  PRIVATE_SERVER: "https://198.211.29.93"
  STAGING_APP: sbjwebapp-staging
  PRODUCTION_APP: sbjwebapp-production

  APEXBUGSERVER_STAGING: obasi79/$STAGING_APP:$CI_COMMIT_REF_SLUG
  APEXBUGSERVER_PRODUCTION: obasi79/$PRODUCTION_APP



# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  untracked: true
  policy: push
  key: ${CI_COMMIT_SHORT_SHA}
  paths:
    - .cache/pip
    - venv/
    - pytest_reports/





# before_script:
#   - python --version  # For debugging
#   - pip install virtualenv
#   - virtualenv venv
#   - source venv/bin/activate
#   - pip install -r requirements.txt




setup:
  stage: setup-stage
  image: python:latest
  tags:
    - sbjwebapp
  before_script:
    - source venv/bin/activate
  script:
    - echo $$FEATURE_APP
    - pip3 install -r requirements.txt



# test:
#   stage: test
#   image: python:latest
#   before_script:

#     - source venv/bin/activate
#     - pip3 install -r requirements.txt

#   script:
#     - pytest --html=pytest_reports/pytest-report.html --self-contained-html
#   artifacts:
#     when: always
#     paths:
#       - pytest_reports/
 # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build-stage
  image: docker:latest
  tags:
    - sbjwebapp
  services:
      - docker:dind
  before_script:

    - echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
  script:
    - echo $DOCKER_IMAGE_TAG
    - docker images
    - ls -al
    - docker build -t $DOCKER_IMAGE_TAG ./flasksbj/

    - docker images
    - docker push $DOCKER_IMAGE_TAG
    - docker images

deploy-feature:
    image: docker:latest
    tags:
      - sbjwebapp
    services:
      - docker:dind
    stage: deploy-feature-stage
    environment:
      name: review/$CI_COMMIT_REF_NAME
      url: https://198.211.29.93
      on_stop: stop_feature
    before_script:
      - export FEATURE_APP2="$CI_ENVIRONMENT_SLUG"
      - echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
    script:
      - echo FEATURE_APP2="$CI_ENVIRONMENT_SLUG" >> deploy_feature.env
      - echo $$FEATURE_APP
      - docker pull $DOCKER_IMAGE_TAG
      - docker tag $DOCKER_IMAGE_TAG $IMAGE_TAG/$FEATURE_APP
      - docker push $IMAGE_TAG/$FEATURE_APP
      - docker run --rm -d -it -p 3200:8080 $IMAGE_TAG/$FEATURE_APP
      - docker ps
      - echo Feature app $IMAGE_TAG/$FEATURE_APP deployed to " $PRIVATE_SERVER
    artifacts:
      reports:
        dotenv: deploy_feature.env
    only:
       - /^feature-.*$/

stop_feature:
    image: docker:latest
    tags:
      - sbjwebapp
    services:
      - docker:dind
    stage: deploy-feature-stage
    variables:
      GIT_STRATEGY: none
    environment:
      name: review/$CI_COMMIT_REF_NAME
      url: https://198.211.29.93
      action: stop
    before_script:
      - export FEATURE_APP="$CI_ENVIRONMENT_SLUG"
    script:
      - echo $FEATURE_APP
      - echo $FEATURE_APP
      - docker stop $(docker ps -a -q --filter ancestor=$FEATURE_APP)
      - echo $FEATURE APP at server $PRIVATE_SERVER is destroyed
    when: manual

deploy-production:
  stage: deploy-server-stage
  image: docker:dind
  services:
    - docker:dind
  tags:
    - sbjwebapp
  environment:
    name: production
    url: https://198.211.29.93
  before_script:
    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
  script:
    - docker pull $DOCKER_IMAGE_TAG
    - docker images
    - echo $APEXBUGSERVER_PRODUCTION
    - docker tag $DOCKER_IMAGE_TAG $APEXBUGSERVER_PRODUCTION
    - echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
    - docker push $APEXBUGSERVER_PRODUCTION
    - docker run --rm -d -it -p 3400:8080 $APEXBUGSERVER_PRODUCTION
    - docker ps
    - echo "App deployed to staging server at " $PRIVATE_SERVER
    - ls -al
  only:
    - main


stop-deploy-production:
    stage: deploy-server-stage
    image: docker:latest
    services:
      - docker:dind
    tags:
      - sbjwebapp
    environment:
      name: production
      url: https://198.211.29.93
    script:
      - echo $APEXBUGSERVER_PRODUCTION
      - docker stop $(docker ps -a -q --filter ancestor=$APEXBUGSERVER_PRODUCTION)
      - echo APP on PRODUCTION SERVER $PRIVATE_SERVER stopped with image name $APEXBUGSERVER_PRODUCTION
    only:
      - main
    when: manual
# deploy-run:
#   stage: deploy-server-stage
#   image: python:latest
#   tags:
#     - sbjwebapp
#   environment:
#     name: production
#     url: https://198.211.29.93
#   script:
#     - ls -al
#     - cd flask/sbj
#     - ls -al
#     - python3 wsgi.py

# pages:
#   script:
#     - pip install sphinx sphinx-rtd-theme
#     - cd doc
#     - make html
#     - mv build/html/ ../public/
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
